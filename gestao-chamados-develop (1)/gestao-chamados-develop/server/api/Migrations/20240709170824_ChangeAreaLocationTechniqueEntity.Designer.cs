// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Contexts;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240709170824_ChangeAreaLocationTechniqueEntity")]
    partial class ChangeAreaLocationTechniqueEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("api.Models.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_area");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("description");

                    b.Property<Guid>("IdEnterprise")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_enterprise");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_date");

                    b.Property<string>("UserCreate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_create");

                    b.Property<string>("UserUpdate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_update");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatedDate" }, "IX_Area_Created_Date");

                    b.HasIndex(new[] { "IdEnterprise" }, "IX_Area_IdEnterprise");

                    b.HasIndex(new[] { "Name" }, "IX_Area_Name");

                    b.ToTable("area", (string)null);
                });

            modelBuilder.Entity("api.Models.Colaborator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_colaborator");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BadgeCardNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("badge_card_number");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<int?>("IdColaboratorCategory")
                        .HasColumnType("int")
                        .HasColumnName("id_colaborator_category");

                    b.Property<Guid>("IdEnterprise")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_enterprise");

                    b.Property<int?>("IdLine")
                        .HasColumnType("int")
                        .HasColumnName("id_line");

                    b.Property<int?>("IdShift")
                        .HasColumnType("int")
                        .HasColumnName("id_shift");

                    b.Property<int>("IdTechniqueCategory")
                        .HasColumnType("int")
                        .HasColumnName("id_technique_category");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("RENumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("re_number");

                    b.Property<string>("RFIDCardNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("rfid_card_number");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_date");

                    b.Property<string>("UserCreate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_create");

                    b.Property<string>("UserUpdate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_update");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatedDate" }, "IX_Colaborator_Created_Date");

                    b.HasIndex(new[] { "IdColaboratorCategory" }, "IX_Colaborator_IdColaboratorCategory");

                    b.HasIndex(new[] { "IdEnterprise" }, "IX_Colaborator_IdEnterprise");

                    b.HasIndex(new[] { "IdLine" }, "IX_Colaborator_IdLine");

                    b.HasIndex(new[] { "IdShift" }, "IX_Colaborator_IdShift");

                    b.HasIndex(new[] { "IdTechniqueCategory" }, "IX_Colaborator_IdTechniqueCategory");

                    b.HasIndex(new[] { "Name" }, "IX_Colaborator_Name");

                    b.ToTable("colaborator", (string)null);
                });

            modelBuilder.Entity("api.Models.ColaboratorCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_colaborator_category");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("description");

                    b.Property<Guid>("IdEnterprise")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_enterprise");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("TypeCategory")
                        .HasColumnType("int")
                        .HasColumnName("type_category");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_date");

                    b.Property<string>("UserCreate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_create");

                    b.Property<string>("UserUpdate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_update");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatedDate" }, "IX_Colaborator_Category_Created_Date");

                    b.HasIndex(new[] { "IdEnterprise" }, "IX_Colaborator_Category_IdEnterprise");

                    b.HasIndex(new[] { "Name" }, "IX_Colaborator_Category_Name");

                    b.HasIndex(new[] { "TypeCategory" }, "IX_Colaborator_Category_TypeCategory");

                    b.ToTable("colaborator_category", (string)null);
                });

            modelBuilder.Entity("api.Models.Component", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_component");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("description");

                    b.Property<Guid?>("IdEnterprise")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_enterprise");

                    b.Property<int>("IdMachine")
                        .HasColumnType("int")
                        .HasColumnName("id_machine");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_date");

                    b.Property<string>("UserCreate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_create");

                    b.Property<string>("UserUpdate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_update");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatedDate" }, "IX_Component_Created_Date");

                    b.HasIndex(new[] { "IdEnterprise" }, "IX_Component_IdEnterprise");

                    b.HasIndex(new[] { "IdMachine" }, "IX_Component_IdMachine");

                    b.HasIndex(new[] { "Name" }, "IX_Component_Name");

                    b.ToTable("component", (string)null);
                });

            modelBuilder.Entity("api.Models.Enterprise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_enterprise")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_date");

                    b.Property<string>("UserCreate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_create");

                    b.Property<string>("UserUpdate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_update");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatedDate" }, "IX_Enterprise_Created_Date");

                    b.HasIndex(new[] { "Name" }, "IX_Enterprise_Name");

                    b.ToTable("enterprise", (string)null);
                });

            modelBuilder.Entity("api.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_event");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<int>("IdTicket")
                        .HasColumnType("int")
                        .HasColumnName("id_ticket");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("message");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("timestamp");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_date");

                    b.Property<string>("UserCreate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_create");

                    b.Property<string>("UserUpdate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_update");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IdTicket" }, "IX_Event_IdTicket");

                    b.HasIndex(new[] { "CreatedDate" }, "IX_Ticket_Created_Date");

                    b.ToTable("event", (string)null);
                });

            modelBuilder.Entity("api.Models.Line", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_line");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("description");

                    b.Property<int>("IdArea")
                        .HasColumnType("int")
                        .HasColumnName("id_area");

                    b.Property<Guid?>("IdEnterprise")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_enterprise");

                    b.Property<int?>("IdSubArea")
                        .HasColumnType("int")
                        .HasColumnName("id_subarea");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("Number")
                        .HasColumnType("int")
                        .HasColumnName("number");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_date");

                    b.Property<string>("UserCreate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_create");

                    b.Property<string>("UserUpdate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_update");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IdArea" }, "IX_Line_Area");

                    b.HasIndex(new[] { "CreatedDate" }, "IX_Line_Created_Date");

                    b.HasIndex(new[] { "IdEnterprise" }, "IX_Line_Enterprise");

                    b.HasIndex(new[] { "Name" }, "IX_Line_Name");

                    b.HasIndex(new[] { "IdSubArea" }, "IX_Line_SubArea");

                    b.ToTable("line", (string)null);
                });

            modelBuilder.Entity("api.Models.Machine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_machine");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("description");

                    b.Property<Guid?>("IdEnterprise")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_enterprise");

                    b.Property<int>("IdLine")
                        .HasColumnType("int")
                        .HasColumnName("id_line");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_date");

                    b.Property<string>("UserCreate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_create");

                    b.Property<string>("UserUpdate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_update");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatedDate" }, "IX_Machine_Created_Date");

                    b.HasIndex(new[] { "IdEnterprise" }, "IX_Machine_IdEnterprise");

                    b.HasIndex(new[] { "IdLine" }, "IX_Machine_IdLine");

                    b.HasIndex(new[] { "Name" }, "IX_Machine_Name");

                    b.ToTable("machine", (string)null);
                });

            modelBuilder.Entity("api.Models.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_shift");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("description");

                    b.Property<string>("EndHour")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("end_hour");

                    b.Property<Guid>("IdEnterprise")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_enterprise");

                    b.Property<string>("StartHour")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("start_hour");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_date");

                    b.Property<string>("UserCreate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_create");

                    b.Property<string>("UserUpdate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_update");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatedDate" }, "IX_Colaborator_Category_Created_Date");

                    b.HasIndex(new[] { "IdEnterprise" }, "IX_Colaborator_Category_IdEnterprise");

                    b.HasIndex(new[] { "EndHour" }, "IX_Shift_EndHour");

                    b.HasIndex(new[] { "StartHour" }, "IX_Shift_StartHour");

                    b.ToTable("shift", (string)null);
                });

            modelBuilder.Entity("api.Models.SubArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_subarea");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("description");

                    b.Property<int>("IdArea")
                        .HasColumnType("int")
                        .HasColumnName("id_area");

                    b.Property<Guid?>("IdEnterprise")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_enterprise");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_date");

                    b.Property<string>("UserCreate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_create");

                    b.Property<string>("UserUpdate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_update");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatedDate" }, "IX_SubArea_Created_Date");

                    b.HasIndex(new[] { "IdArea" }, "IX_SubArea_IdArea");

                    b.HasIndex(new[] { "IdEnterprise" }, "IX_SubArea_IdEnterprise");

                    b.HasIndex(new[] { "Name" }, "IX_SubArea_Name");

                    b.ToTable("subarea", (string)null);
                });

            modelBuilder.Entity("api.Models.TechniqueCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_technique_category");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("description");

                    b.Property<int?>("IdAreaLocationCover")
                        .HasColumnType("int")
                        .HasColumnName("id_area_location_cover");

                    b.Property<Guid?>("IdEnterprise")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_enterprise");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("TypeCategory")
                        .HasColumnType("int")
                        .HasColumnName("type_category");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_date");

                    b.Property<string>("UserCreate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_create");

                    b.Property<string>("UserUpdate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_update");

                    b.HasKey("Id");

                    b.HasIndex("IdAreaLocationCover");

                    b.HasIndex(new[] { "CreatedDate" }, "IX_Technique_Category_Created_Date");

                    b.HasIndex(new[] { "IdEnterprise" }, "IX_Technique_Category_IdEnterprise");

                    b.HasIndex(new[] { "Name" }, "IX_Technique_Category_Name");

                    b.HasIndex(new[] { "TypeCategory" }, "IX_Technique_Category_TypeCategory");

                    b.ToTable("technique_category", (string)null);
                });

            modelBuilder.Entity("api.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_ticket");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<int?>("IdArea")
                        .HasColumnType("int")
                        .HasColumnName("id_area");

                    b.Property<int?>("IdComponent")
                        .HasColumnType("int")
                        .HasColumnName("id_component");

                    b.Property<Guid>("IdEnterprise")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_enterprise");

                    b.Property<int?>("IdLine")
                        .HasColumnType("int")
                        .HasColumnName("id_line");

                    b.Property<int?>("IdMachine")
                        .HasColumnType("int")
                        .HasColumnName("id_machine");

                    b.Property<int?>("IdOpenColaborator")
                        .HasColumnType("int")
                        .HasColumnName("id_open_colaborator");

                    b.Property<int?>("IdResponsibleManutentor")
                        .HasColumnType("int")
                        .HasColumnName("id_responsible_manutentor");

                    b.Property<int?>("IdSubArea")
                        .HasColumnType("int")
                        .HasColumnName("id_subarea");

                    b.Property<int?>("IdTechniqueCategory")
                        .HasColumnType("int")
                        .HasColumnName("id_technique_category");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<double>("TotalServiceTime")
                        .HasColumnType("float")
                        .HasColumnName("total_service_time");

                    b.Property<double>("TotalTicketTime")
                        .HasColumnType("float")
                        .HasColumnName("total_ticket_time");

                    b.Property<double>("TotalWaitingTechnicalTime")
                        .HasColumnType("float")
                        .HasColumnName("total_waiting_time");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_date");

                    b.Property<string>("UserCreate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_create");

                    b.Property<string>("UserUpdate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_update");

                    b.HasKey("Id");

                    b.HasIndex("IdArea");

                    b.HasIndex("IdComponent");

                    b.HasIndex("IdLine");

                    b.HasIndex("IdMachine");

                    b.HasIndex("IdOpenColaborator");

                    b.HasIndex("IdResponsibleManutentor");

                    b.HasIndex("IdSubArea");

                    b.HasIndex("IdTechniqueCategory");

                    b.HasIndex(new[] { "CreatedDate" }, "IX_Ticket_Created_Date");

                    b.HasIndex(new[] { "IdEnterprise" }, "IX_Ticket_IdEnterprise");

                    b.ToTable("ticket", (string)null);
                });

            modelBuilder.Entity("api.Models.TicketColaborator", b =>
                {
                    b.Property<int>("IdColaborator")
                        .HasColumnType("int")
                        .HasColumnName("id_colaborator");

                    b.Property<int>("IdTicket")
                        .HasColumnType("int")
                        .HasColumnName("id_ticket");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_date");

                    b.Property<string>("UserCreate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_create");

                    b.Property<string>("UserUpdate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_update");

                    b.HasKey("IdColaborator", "IdTicket");

                    b.HasIndex(new[] { "CreatedDate" }, "IX_TicketColaborator_Created_Date");

                    b.HasIndex(new[] { "IdColaborator" }, "IX_TicketColaborator_IdColaborator");

                    b.HasIndex(new[] { "IdTicket" }, "IX_TicketColaborator_IdTicket");

                    b.ToTable("ticket_colaborator", (string)null);
                });

            modelBuilder.Entity("api.Models.TicketTechnique", b =>
                {
                    b.Property<int>("IdTechniqueCategory")
                        .HasColumnType("int")
                        .HasColumnName("id_technique");

                    b.Property<int>("IdTicket")
                        .HasColumnType("int")
                        .HasColumnName("id_ticket");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<int>("ServiceStatus")
                        .HasColumnType("int")
                        .HasColumnName("service_status");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_date");

                    b.Property<string>("UserCreate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_create");

                    b.Property<string>("UserUpdate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_update");

                    b.HasKey("IdTechniqueCategory", "IdTicket");

                    b.HasIndex(new[] { "CreatedDate" }, "IX_TicketColaborator_Created_Date");

                    b.HasIndex(new[] { "IdTechniqueCategory" }, "IX_TicketColaborator_IdTechniqueCategory");

                    b.HasIndex(new[] { "IdTicket" }, "IX_TicketColaborator_IdTicket");

                    b.ToTable("ticket_technique", (string)null);
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_user")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("email");

                    b.Property<Guid>("IdEnterprise")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_enterprise");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("password");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_date");

                    b.Property<string>("UserCreate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_create");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_name");

                    b.Property<string>("UserUpdate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_update");

                    b.HasKey("Id");

                    b.HasIndex("IdEnterprise");

                    b.HasIndex(new[] { "CreatedDate" }, "IX_User_Created_Date");

                    b.HasIndex(new[] { "Email" }, "IX_User_Email");

                    b.HasIndex(new[] { "UserName" }, "IX_User_UserName");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("api.Models.Area", b =>
                {
                    b.HasOne("api.Models.Enterprise", "Enterprise")
                        .WithMany("Areas")
                        .HasForeignKey("IdEnterprise")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enterprise");
                });

            modelBuilder.Entity("api.Models.Colaborator", b =>
                {
                    b.HasOne("api.Models.ColaboratorCategory", "ColaboratorCategory")
                        .WithMany("Colaborators")
                        .HasForeignKey("IdColaboratorCategory");

                    b.HasOne("api.Models.Enterprise", "Enterprise")
                        .WithMany("Colaborators")
                        .HasForeignKey("IdEnterprise")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Line", "Line")
                        .WithMany("Colaborators")
                        .HasForeignKey("IdLine");

                    b.HasOne("api.Models.Shift", "Shift")
                        .WithMany("Colaborators")
                        .HasForeignKey("IdShift");

                    b.HasOne("api.Models.TechniqueCategory", "TechniqueCategory")
                        .WithMany("Colaborators")
                        .HasForeignKey("IdTechniqueCategory")
                        .IsRequired();

                    b.Navigation("ColaboratorCategory");

                    b.Navigation("Enterprise");

                    b.Navigation("Line");

                    b.Navigation("Shift");

                    b.Navigation("TechniqueCategory");
                });

            modelBuilder.Entity("api.Models.ColaboratorCategory", b =>
                {
                    b.HasOne("api.Models.Enterprise", "Enterprise")
                        .WithMany("ColaboratorCategories")
                        .HasForeignKey("IdEnterprise")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enterprise");
                });

            modelBuilder.Entity("api.Models.Component", b =>
                {
                    b.HasOne("api.Models.Enterprise", "Enterprise")
                        .WithMany("Components")
                        .HasForeignKey("IdEnterprise");

                    b.HasOne("api.Models.Machine", "Machine")
                        .WithMany("Components")
                        .HasForeignKey("IdMachine")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enterprise");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("api.Models.Event", b =>
                {
                    b.HasOne("api.Models.Ticket", "Ticket")
                        .WithMany("Events")
                        .HasForeignKey("IdTicket")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("api.Models.Line", b =>
                {
                    b.HasOne("api.Models.Area", "Area")
                        .WithMany("Lines")
                        .HasForeignKey("IdArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Enterprise", "Enterprise")
                        .WithMany("Lines")
                        .HasForeignKey("IdEnterprise");

                    b.HasOne("api.Models.SubArea", "SubArea")
                        .WithMany("Lines")
                        .HasForeignKey("IdSubArea")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Area");

                    b.Navigation("Enterprise");

                    b.Navigation("SubArea");
                });

            modelBuilder.Entity("api.Models.Machine", b =>
                {
                    b.HasOne("api.Models.Enterprise", "Enterprise")
                        .WithMany("Machines")
                        .HasForeignKey("IdEnterprise");

                    b.HasOne("api.Models.Line", "Line")
                        .WithMany("Machines")
                        .HasForeignKey("IdLine")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enterprise");

                    b.Navigation("Line");
                });

            modelBuilder.Entity("api.Models.Shift", b =>
                {
                    b.HasOne("api.Models.Enterprise", "Enterprise")
                        .WithMany("Shifts")
                        .HasForeignKey("IdEnterprise")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enterprise");
                });

            modelBuilder.Entity("api.Models.SubArea", b =>
                {
                    b.HasOne("api.Models.Area", "Area")
                        .WithMany("SubAreas")
                        .HasForeignKey("IdArea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Enterprise", "Enterprise")
                        .WithMany("SubAreas")
                        .HasForeignKey("IdEnterprise");

                    b.Navigation("Area");

                    b.Navigation("Enterprise");
                });

            modelBuilder.Entity("api.Models.TechniqueCategory", b =>
                {
                    b.HasOne("api.Models.Area", "AreaLocationCover")
                        .WithMany("TechniqueCategories")
                        .HasForeignKey("IdAreaLocationCover");

                    b.HasOne("api.Models.Enterprise", "Enterprise")
                        .WithMany("TechniqueCategories")
                        .HasForeignKey("IdEnterprise")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AreaLocationCover");

                    b.Navigation("Enterprise");
                });

            modelBuilder.Entity("api.Models.Ticket", b =>
                {
                    b.HasOne("api.Models.Area", "Area")
                        .WithMany("Tickets")
                        .HasForeignKey("IdArea");

                    b.HasOne("api.Models.Component", "Component")
                        .WithMany("Tickets")
                        .HasForeignKey("IdComponent");

                    b.HasOne("api.Models.Enterprise", "Enterprise")
                        .WithMany("Tickets")
                        .HasForeignKey("IdEnterprise")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Line", "Line")
                        .WithMany("Tickets")
                        .HasForeignKey("IdLine");

                    b.HasOne("api.Models.Machine", "Machine")
                        .WithMany("Tickets")
                        .HasForeignKey("IdMachine");

                    b.HasOne("api.Models.Colaborator", "OpenColaborator")
                        .WithMany("OpenedTickes")
                        .HasForeignKey("IdOpenColaborator");

                    b.HasOne("api.Models.Colaborator", "ResponsibleManutentor")
                        .WithMany("ResponsibleTickets")
                        .HasForeignKey("IdResponsibleManutentor");

                    b.HasOne("api.Models.SubArea", "SubArea")
                        .WithMany("Tickets")
                        .HasForeignKey("IdSubArea");

                    b.HasOne("api.Models.TechniqueCategory", "TechniqueCategory")
                        .WithMany("Tickets")
                        .HasForeignKey("IdTechniqueCategory");

                    b.Navigation("Area");

                    b.Navigation("Component");

                    b.Navigation("Enterprise");

                    b.Navigation("Line");

                    b.Navigation("Machine");

                    b.Navigation("OpenColaborator");

                    b.Navigation("ResponsibleManutentor");

                    b.Navigation("SubArea");

                    b.Navigation("TechniqueCategory");
                });

            modelBuilder.Entity("api.Models.TicketColaborator", b =>
                {
                    b.HasOne("api.Models.Colaborator", "Colaborator")
                        .WithMany("WorkedTickets")
                        .HasForeignKey("IdColaborator")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Ticket", "Ticket")
                        .WithMany("Colaborators")
                        .HasForeignKey("IdTicket")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Colaborator");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("api.Models.TicketTechnique", b =>
                {
                    b.HasOne("api.Models.TechniqueCategory", "TechniqueCategory")
                        .WithMany("TicketTechniques")
                        .HasForeignKey("IdTechniqueCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Ticket", "Ticket")
                        .WithMany("Techniques")
                        .HasForeignKey("IdTicket")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("TechniqueCategory");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.HasOne("api.Models.Enterprise", "Enterprise")
                        .WithMany("Users")
                        .HasForeignKey("IdEnterprise")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enterprise");
                });

            modelBuilder.Entity("api.Models.Area", b =>
                {
                    b.Navigation("Lines");

                    b.Navigation("SubAreas");

                    b.Navigation("TechniqueCategories");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("api.Models.Colaborator", b =>
                {
                    b.Navigation("OpenedTickes");

                    b.Navigation("ResponsibleTickets");

                    b.Navigation("WorkedTickets");
                });

            modelBuilder.Entity("api.Models.ColaboratorCategory", b =>
                {
                    b.Navigation("Colaborators");
                });

            modelBuilder.Entity("api.Models.Component", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("api.Models.Enterprise", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("ColaboratorCategories");

                    b.Navigation("Colaborators");

                    b.Navigation("Components");

                    b.Navigation("Lines");

                    b.Navigation("Machines");

                    b.Navigation("Shifts");

                    b.Navigation("SubAreas");

                    b.Navigation("TechniqueCategories");

                    b.Navigation("Tickets");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("api.Models.Line", b =>
                {
                    b.Navigation("Colaborators");

                    b.Navigation("Machines");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("api.Models.Machine", b =>
                {
                    b.Navigation("Components");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("api.Models.Shift", b =>
                {
                    b.Navigation("Colaborators");
                });

            modelBuilder.Entity("api.Models.SubArea", b =>
                {
                    b.Navigation("Lines");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("api.Models.TechniqueCategory", b =>
                {
                    b.Navigation("Colaborators");

                    b.Navigation("TicketTechniques");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("api.Models.Ticket", b =>
                {
                    b.Navigation("Colaborators");

                    b.Navigation("Events");

                    b.Navigation("Techniques");
                });
#pragma warning restore 612, 618
        }
    }
}
